---
title: "Data Analysis"
subtitle: "Comprehensive Data Cleaning & Exploratory Analysis of Job Market Trends"
execute:
  echo: true   
  warning: false 
jupyter: python3
author:
  - name: Ling Lu
    affiliations:
      - id: U15738240
        name: Boston University
        city: Boston
        state: MA
  - name: Luoyan Zhang
    affiliations:
      - id: U00607539
        name: Boston University
        city: Boston
        state: MA
  - name: Yinuo Wang
    affiliations:
      - id: U78839500
        name: Boston University
        city: Boston
        state: MA
bibliography: references.bib
csl: csl/econometrica.csl
format: 
  html:
    toc: true
    number-sections: true
    df-print: paged
---


# Introduction

This section presents a detailed data analysis of job market trends in 2024, focusing on AI-driven changes, salary disparities, and employment trends across different regions and industries.


## Data Import and Cleaning
```{python}
# Load necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

```
# Load dataset

```{python}

df = pd.read_csv("/Users/cassielu/Downloads/lightcast_job_postings.csv")

# Display dataset summary

df.info()
df.describe()

```

# Data Cleaning & Preprocessing

## Drop Unnecessary Columns

 **Which columns should be dropped, and why?**

The columns selected for removal are considered redundant because they either provide duplicate information, are unnecessary for analysis, or have more detailed equivalents in the dataset. For example, `"ID"` serves as a unique identifier but is often not needed for analysis, while `"URL"` and `"ACTIVE_URLS"` contain job posting links that are useful externally but not critical for data processing. Similarly, `"LAST_UPDATED_TIMESTAMP"` is dropped because `"LAST_UPDATED_DATE"` already provides update information in a more readable format. The `"DUPLICATES"` column, which likely flags repeated entries, is also removed since duplicates can be handled separately.

Additionally, industry and occupational classification columns like `"NAICS2"` to `"NAICS6"` and `"SOC_2"`, `"SOC_3"`, `"SOC_5"` are removed because these represent different levels of classification, and more relevant or updated versions (e.g., `"NAICS_2022_2"` to `"NAICS_2022_6"`) are already present in the dataset. Removing these redundant columns helps streamline the dataset, making it more efficient to analyze without losing valuable information.

```{python}

columns_to_drop = [
    "id", "duplicates", "last_updated_timestamp",
    "naics2", "naics3", "naics4", "naics5", "naics6",
    "soc_2", "soc_3", "soc_5"
]

df = df.drop(columns=[col for col in columns_to_drop if col in df.columns], inplace=False)

print("Columns after dropping:", df.columns)
df.head()
```

##  Handle Missing Values
 **How should missing values be handled?**

Missing values should be handled strategically based on their impact on analysis. First, visualizing missing data with a heatmap helps identify patterns and assess severity. Columns with more than 50% missing values are dropped to avoid unreliable or incomplete data. For numerical fields like `"Salary"`, filling missing values with the median ensures the data remains representative without being skewed by outliers. Categorical fields like `"Industry"` are filled with `"Unknown"` to maintain completeness while preserving interpretability. This approach balances data retention and accuracy, ensuring meaningful analysis without introducing bias.

```{python}
import missingno as msno
import matplotlib.pyplot as plt

# Visualize missing data
msno.heatmap(df)
plt.title("Missing Values Heatmap")
plt.show()

# Drop columns with >50% missing values
df.dropna(thresh=len(df) * 0.5, axis=1, inplace=True)

# Fill missing values

industry_cols = ["lightcast_sectors_name", "lightcast_sectors"]
existing_industry_col = next((col for col in industry_cols if col in df.columns), None)

if existing_industry_col:
    df[existing_industry_col].fillna("Unknown", inplace=True)
else:
    print("Warning: No industry-related column found in the dataset.")



if "salary" in df.columns:
    df["salary_avg"] = df["salary"]
elif "salary_from" in df.columns and "salary_to" in df.columns:
    df["salary_avg"] = df[["salary_from", "salary_to"]].mean(axis=1, skipna=True)
else:
    print("Warning: No salary-related column found!")






```

## Remove Duplicates

To ensure each job is counted only once, we remove duplicates based on job title, company, location, and posting date.

```{python}

columns_to_check = ["title", "company", "location", "posted"]  # Corrected column names
existing_columns = [col for col in columns_to_check if col in df.columns]

print("Before removing duplicates:")
print(df[existing_columns].head())


df = df.drop_duplicates(subset=existing_columns, keep="first")

print("\nAfter removing duplicates:")
print(df[existing_columns].head())

print("\nDuplicates removed based on:", existing_columns)

```

# Exploratory Data Analysis (EDA)
**Why these visualizations were chosen?**

EDA helps uncover patterns in job postings and salaries across industries. These insights assist job seekers in making informed career decisions.

## Job Postings by Industry
**Why this visualization?**

The bar chart displays the distribution of job postings across different industries, helping identify which sectors have the most opportunities. This allows for a quick comparison of industry demand and can highlight trends in job availability.

```{python}

import plotly.express as px

## Job postings by industry

industry_col = "lightcast_sectors_name" if "lightcast_sectors_name" in df.columns else None

if industry_col:
    fig = px.bar(df[industry_col].value_counts(), title="Job Postings by Industry")
    fig.show()
else:
    print("Warning: No valid industry column found.")


```

## Salary Distribution by Industry
**Why this visualization?**

The box plot visualizes salary distribution by industry, showcasing variations in compensation and identifying potential outliers. This helps compare earnings across different sectors and assess salary disparities within the job market.

```{python}

if industry_col:
    fig = px.box(df, x=industry_col, y=salary, title="Salary Distribution by Industry")
    fig.show()
else:
    print("Warning: Industry or salary column not found in dataset.")

```

## Remote vs. On-Site Jobs
**Why this visualization?**

The pie chart illustrates the proportion of remote versus on-site jobs, providing insights into workplace flexibility. It helps understand the prevalence of remote work and how job location preferences are shifting in the job market.

```{python}

fig = px.pie(df, names="remote_type_name", title="Remote vs. On-Site Jobs")
fig.show()

```



## Conclusion
This analysis provides insights into the evolving job market in 2024, highlighting AI's impact, salary trends, and employment disparities. The findings indicate how different disciplines benefit from AI's rise, with certain fields seeing more substantial salary growth. Further analysis will explore regional job differences and future career recommendations.
